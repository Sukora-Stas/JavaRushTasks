taskKey="com.javarush.task.task28.task2810.big07"

Aggregator (7)

Чтобы Хэдхантер знал, кто к нему коннектится, проставим Request Headers в наш запрос.

Для разработчиков созданы инструменты, которые показывают различную информацию про запросы.
Я расскажу тебе про два инструмента.

***Chrome****
1. В браузере Хром пойди в Меню - Инструменты - Инструменты разработчика, или нажми Ctrl+Shift+I
2. В браузерной строке набери URL http://hh.ua/search/vacancy?text=java+киев
3. Перейди на табу Network(Сеть), запрашиваемый URL должен быть в самом верху.
У него метод отправки данных GET (еще есть POST), статус 200(успешно)
4. Выбери его, откроется информация о страничке.
5. Найди Request Headers(Заголовки запроса)

***FireFox***
1. Для FireFox есть плагин FireBug. Ставь FireBug (Меню - Дополнения - Поиск - FireBug, установить).
2. Правой клавишей мыши - Инспектировать элемент с помощью FireBug. Перейди на табу Net(Сеть), подменю HTML.
3. В браузерной строке набери URL http://hh.ua/search/vacancy?text=java+киев
4. В подменю HTML появился список запросов включая набранный в браузерной строке. Нажми на нем и зайди в меню "Заголовки"
5. Найди Request Headers(Заголовки запроса)

Добавь в коннекшен к урлу Хедхантера userAgent и referrer.


Требования:
1.	В методе getVacancies класса HHStrategy после создания коннекшена добавь заголовок userAgent.
2.	В методе getVacancies класса HHStrategy после создания коннекшена добавь заголовок referrer.


Aggregator (6)

1. Слева в панеле Project найди снизу External Libraries. В jsoup найди пакет examples, посмотри классы в этом пакете.

2. По аналогии с реализацией в примерах кода jsoup - реализуй коннекшен к урлу ХэдХантера методом GET.
Это нужно сделать в методе getVacancies класса HHStrategy.
Подсказка: получится объект класса Document.

3. Поставь брекпоинт сразу после коннекшена. Запусти программу в дебаг моде.
Скопируй полученное значение document.html() в буфер.

4. Создай файл с расширением html где-то в корне проекта.
Вставь содержимое буфера в этот файл и отформатируй его Ctrl+Alt+L, IDEA умеет форматировать HTML.
Ура! Это код страницы HTML :)

5. Реализуй в вакансии (Vacancy) методы equals/hashCode.
Alt+Enter - equals() and hashCode().



Aggregator (5)

1. Добавь в интерфейс метод getVacancies(String searchString), который будет возвращать список вакансий.

2. Поправь ошибки в классе HHStrategy.

3. Вернись в метод getJavaVacancies класса Provider, реализуй его логику из расчета, что всех данных хватает.

4. Давай попробуем запустить и посмотреть, как работает наша программа.
В методе main вместо вывода на экран напиши controller.scan();
Воспользуйся подсказкой IDEA и создай метод.
Внутри метода пройдись по всем провайдерам и собери с них все вакансии, добавь их в список. Выведи количество вакансий в консоль.

5. Исправь NPE, если появляется это исключение (поставь заглушку).



Aggregator (4)

Открой сайт ХэдХантер - http://hh.ua/ или http://hh.ru/
В строке поиска набери "java Киев", снизу перейди на вторую страницу, т.к. урлы часто отличаются на первой странице и далее.
У меня получилась такая ссылка:
http://hh.ua/search/vacancy?text=java+Киев&page=1
Из этого следует, что
1) если тебе нужно будет фильтровать по городу, то ты добавишь его после слова java, разделив их знаком "+",
2) нумерация страниц начинается с 0.

Итак, ссылка будет примерно такой:
http://hh.ua/search/vacancy?text=java+ADDITIONAL_VALUE&page=PAGE_VALUE

1. Из полученной ссылки в HHStrategy создай приватную строковую константу URL_FORMAT, которая будет передаваться в String.format.
String.format(URL_FORMAT, "Kiev", 3) должно равняться
"http://hh.ua/search/vacancy?text=java+Kiev&page=3"
или
"http://hh.ru/search/vacancy?text=java+Kiev&page=3"
Для этого скопируйте ссылку в код и нажмите на ней нужную комбинацию клавиш.
Ctrl+Alt+C(Constant) - создание констант,
Ctrl+Alt+M(Method) - создание методов,
Ctrl+Alt+V(Variable) - создание переменных.

2. Тебе нужно программно получить исходный код страницы. Это HTTP запрос. Тебе понадобится Java HTML Parser.
Хороший парсер jsoup, будешь использовать его.
Найди сайт jsoup - Java HTML Parser, скачай с него либу версии и 1.9.2 и ее сорцы(sources). Класть их внутрь проекта не нужно!

3. Подключи новые либы:
В IDEA открой Project Structure (в меню File).
Слева выбери Project Settings -> Libraries, в окошке справа сверху нажми "+".
Выбери "Java", если либы еще не нет, либо "Attach Files or Directories", чтоб добавить джарники к существующей либе.
В диалоговом окне открой путь к папке из п.2, открой саму папку и выбери все либы - *.jar файлы.

4. Прочитай дополнительный материал к лекции в Сообществе.



Aggregator (3)

Начиная с этого задании ты начнешь писать логику получения данных с сайта.
Эта логика будет полностью сосредоточена в классах, реализующих Strategy.

Провайдер в данном случае выступает в качестве контекста, если мы говорим о паттерне Стратегия.
В провайдере должен быть метод, который будет вызывать метод стратегии для выполнения главной операции.
Этот метод будет возвращать все java вакансии с выбранного сайта (ресурса).

1. В корне задачи создай пакет vo (value object), в котором создай класс Vacancy.
Этот класс будет хранить данные о вакансии.

2. В Provider создай метод List<Vacancy> getJavaVacancies(String searchString). Оставь пока метод пустым.

3. Что есть у вакансии?
Название, зарплата, город, название компании, название сайта, на котором вакансия найдена, ссылка на вакансию.
В классе Vacancy создай соответствующие строковые поля: title, salary, city, companyName, siteName, url.

4. Создай геттеры и сеттеры для всех полей класса Vacancy.

5. В пакете model создай класс HHStrategy от Strategy.
Этот класс будет реализовывать конкретную стратегию работы с сайтом ХэдХантер (http://hh.ua/ и http://hh.ru/).



Aggregator (2)

1. Создай класс Controller, в нем будет содержаться бизнес логика.

2. В Controller добавь паблик конструктор, который будет принимать столько провайдеров, сколько в него передадут для обработки.
Сохрани их в приватное поле providers.
Помнишь, как это делать? Нужно нажать на аргументе конструктора Alt+Enter, выбрать Create Field for Parameter 'providers'.

3. Если провайдеры не переданы в конструктор контроллера, то брось IllegalArgumentException.

4. Создай метод toString в классе Controller (Alt+Insert -> toString()) со стандартной реализацией (должен выводить поле providers).

5. В методе main создай провайдер, а потом создай контроллер с этим провайдером.

6. В методе main выведи в консоль созданный экземпляр Controller-а.



