taskKey="com.javarush.task.task25.task2515.big15"

Space (15)

Надо еще закончить класс Space.

Напиши метод getAllItems:
Метод должен возвращать один общий список всех объектов типа BaseObject.

Напиши метод moveAllItems:
Метод должен двигать все объекты по одному разу.
Надо:
а) получить список всех объектов типа BaseObject;
б) вызвать у каждого из них метод move().


Требования:
1.	В классе Space реализуй метод getAllItems(). Он должен возвращать список всех объектов типа BaseObject, которые сохранены в полях Space.
2.	В классе Space реализуй метод moveAllItems(). Он должен вызывать move() у всех объектов типа BaseObject, которые сохранены в полях Space.


Space (14)

Теперь напиши класс Ufo.
Он чуть сложнее класса Bomb и проще SpaceShip.
Тебе понадобятся методы draw(), move(), fire().
Также не забудь о конструкторе. Типы параметров double, а радиус ufo будет равен 3.

Метод draw() сделай по аналогии с SpaceShip. Рисовать UFO будем символом 'U'.
И добавь матрицу, по аналогии с SpaceShip.

Метод move() надо сделать так:
а) корабль перемещается по случайной траектории;
Подсказка:
double dx = Math.random() * 2 - 1; //-1..1
double dy = Math.random() * 2 - 1; //-1..1
б) корабль не опускается в нижнюю половину экрана;
y <= height/2
в) С вероятностью 10% корабль должен стрелять - вызывать метод fire.

Метод fire():
Корабль сбрасывает одну бомбу по середине.
Сделать аналогично классу SpaceShip.



Space (13)

Теперь перейдем к методам draw, move.
В методе move() надо:
а) увеличить x на dx;
б) проверить, не вылез ли корабль за границы космоса [0, Space.game.getWidth()]. Используй метод checkBorders.
Учти, что ширина корабля равна двум его радиусам.

Метод draw я напишу сам - просто объяви пустой метод.

Еще нам понадобится метод fire(), ведь корабль умеет стрелять.
Этот метод вызывается, когда надо произвести выстрел.
В этом методе надо:
а) создать две ракеты;
б) установить им координаты левого края корабля и правого края корабля (пушки находятся на расстоянии 2 от центра корабля);
в) добавить эти ракеты в список ракет объекта game.

Его можно получить так:
Space.game.getRockets()



Space (12)

Теперь займемся кораблем.
Для сложности сделаем так: если пользователь нажал кнопку влево, то корабль начинает все время двигаться влево.
Если нажал кнопку вправо - все время в право до упора.
Поэтому заведем специальную переменную dx, которая будет хранить направление движения корабля.
если dx = 1, корабль каждый ход идет на 1 вправо,
если dx = -1, корабль каждый ход идет на 1 влево.
Надо:
а) добавь конструктор, можно такой:
Радиус корабля будет равен 3. Корабль большой - это вам не ракета и не бомба.
public SpaceShip(int x, int y)
{
super(x, y, 3);
}
б) добавь в класс SpaceShip переменную dx (double, по умолчанию равна 0);
в) метод moveLeft(), устанавливает dx равной -1;
г) метод moveRight(), устанавливает dx равной 1.



Space (11)

Теперь напишем класс Rocket.
Практически совпадает с классом Bomb.
Только:
а) Ракета летит вверх (т.е. y уменьшается на 1);
б) Рисуем не букву "B", а букву "R".



Space (10)

Теперь напишем класс Bomb. Тут все просто.
Bomb унаследован от BaseObject.
Надо:
а) изменить конструктор:
Конструктор Bomb должен выглядеть примерно так:
public Bomb(double x, double y)
{
super(x, y, 1);
}
x и y переданные в конструктор Bomb мы передаем дальше в конструктор BaseObject с помощью super,
где так же указываем радиус "бомбы" равный 1.

б) написать метод move():
тут все просто - бомба падает вниз - просто увеличиваем y на 1.

в) метод draw(Canvas canvas):
тут тоже не очень сложная логика.
Давай просто ставить точку с координатами (x,y) и "цветом" B:
canvas.setPoint(x,y,'B').

г) Создай в классе Space нашу игру public static Space game.



