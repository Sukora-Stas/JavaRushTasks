taskKey="com.javarush.task.task25.task2515.big13"

Space (13)

Теперь перейдем к методам draw, move.
В методе move() надо:
а) увеличить x на dx;
б) проверить, не вылез ли корабль за границы космоса [0, Space.game.getWidth()]. Используй метод checkBorders.
Учти, что ширина корабля равна двум его радиусам.

Метод draw я напишу сам - просто объяви пустой метод.

Еще нам понадобится метод fire(), ведь корабль умеет стрелять.
Этот метод вызывается, когда надо произвести выстрел.
В этом методе надо:
а) создать две ракеты;
б) установить им координаты левого края корабля и правого края корабля (пушки находятся на расстоянии 2 от центра корабля);
в) добавить эти ракеты в список ракет объекта game.

Его можно получить так:
Space.game.getRockets()


Требования:
1.	В классе SpaceShip напиши метод move(), который увеличивает поле x на значение dx и проверяет, не вылез ли корабль за границы космоса.
2.	В классе SpaceShip добавь пустой метод draw(Canvas canvas).
3.	В классе SpaceShip напиши метод fire(), который создает две ракеты с координатами левого и правого края корабля и добавляет их в поле rockets у объекта game.


Space (12)

Теперь займемся кораблем.
Для сложности сделаем так: если пользователь нажал кнопку влево, то корабль начинает все время двигаться влево.
Если нажал кнопку вправо - все время в право до упора.
Поэтому заведем специальную переменную dx, которая будет хранить направление движения корабля.
если dx = 1, корабль каждый ход идет на 1 вправо,
если dx = -1, корабль каждый ход идет на 1 влево.
Надо:
а) добавь конструктор, можно такой:
Радиус корабля будет равен 3. Корабль большой - это вам не ракета и не бомба.
public SpaceShip(int x, int y)
{
super(x, y, 3);
}
б) добавь в класс SpaceShip переменную dx (double, по умолчанию равна 0);
в) метод moveLeft(), устанавливает dx равной -1;
г) метод moveRight(), устанавливает dx равной 1.



Space (11)

Теперь напишем класс Rocket.
Практически совпадает с классом Bomb.
Только:
а) Ракета летит вверх (т.е. y уменьшается на 1);
б) Рисуем не букву "B", а букву "R".



Space (10)

Теперь напишем класс Bomb. Тут все просто.
Bomb унаследован от BaseObject.
Надо:
а) изменить конструктор:
Конструктор Bomb должен выглядеть примерно так:
public Bomb(double x, double y)
{
super(x, y, 1);
}
x и y переданные в конструктор Bomb мы передаем дальше в конструктор BaseObject с помощью super,
где так же указываем радиус "бомбы" равный 1.

б) написать метод move():
тут все просто - бомба падает вниз - просто увеличиваем y на 1.

в) метод draw(Canvas canvas):
тут тоже не очень сложная логика.
Давай просто ставить точку с координатами (x,y) и "цветом" B:
canvas.setPoint(x,y,'B').

г) Создай в классе Space нашу игру public static Space game.



Space (9)

Еще Canvas понадобится два метода, напиши их.
а) метод clear();
Этот метод будет очищать матрицу, чтобы на ней снова можно было рисовать.
Например заменить все символы матрицы на пробелы.

б) метод print();
Этот метод отрисовывает матрицу на экран.
Тут уже ты должен сам разобраться: вывести набор символов не так уж и сложно.
Не забудь добавить пару пустых строк в конце, чтобы матрицы выведенные в разное время не слипались.



Space (8)

Что мы будем делать с Canvas?
Мы будем рисовать на нем (в его матрице).
Поэтому нам понадобятся два метода:
public void setPoint(double x, double y, char c),
public void drawMatrix(double x, double y, int[][] matrix, char c).

Первый метод - setPoint будет "ставить точку в координатах x,y цветом c".
В методе надо:
а) округлить x и y до целых чисел,
б) занести в matrix[y][x] значение с,
в) ничего не делать, если x<0 или y<0 или y>matrix.length или x>matrix[0].length.

Второй метод - drawMatrix копирует переданную ему картинку (матрицу) в матрицу Canvas.
И не просто копирует, а начиная с координат x, y.
В методе надо:
а) с помощью двух вложенных циклов пройтись по всем ячейкам переданной картинки,
б) если значение ячейки matrix[i][j] не равно 0, то покрасить в матрице объекта Canvas точку (x+j, y+i) в цвет c:
setPoint(x+j, y+i, c)



